/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Authors.AuthorsPath;
import jooq.tables.Books.BooksPath;
import jooq.tables.records.BookAuthorsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookAuthors extends TableImpl<BookAuthorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.book_authors</code>
     */
    public static final BookAuthors BOOK_AUTHORS = new BookAuthors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookAuthorsRecord> getRecordType() {
        return BookAuthorsRecord.class;
    }

    /**
     * The column <code>public.book_authors.book_id</code>.
     */
    public final TableField<BookAuthorsRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.book_authors.author_id</code>.
     */
    public final TableField<BookAuthorsRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private BookAuthors(Name alias, Table<BookAuthorsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BookAuthors(Name alias, Table<BookAuthorsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.book_authors</code> table reference
     */
    public BookAuthors(String alias) {
        this(DSL.name(alias), BOOK_AUTHORS);
    }

    /**
     * Create an aliased <code>public.book_authors</code> table reference
     */
    public BookAuthors(Name alias) {
        this(alias, BOOK_AUTHORS);
    }

    /**
     * Create a <code>public.book_authors</code> table reference
     */
    public BookAuthors() {
        this(DSL.name("book_authors"), null);
    }

    public <O extends Record> BookAuthors(Table<O> path, ForeignKey<O, BookAuthorsRecord> childPath, InverseForeignKey<O, BookAuthorsRecord> parentPath) {
        super(path, childPath, parentPath, BOOK_AUTHORS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BookAuthorsPath extends BookAuthors implements Path<BookAuthorsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BookAuthorsPath(Table<O> path, ForeignKey<O, BookAuthorsRecord> childPath, InverseForeignKey<O, BookAuthorsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BookAuthorsPath(Name alias, Table<BookAuthorsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BookAuthorsPath as(String alias) {
            return new BookAuthorsPath(DSL.name(alias), this);
        }

        @Override
        public BookAuthorsPath as(Name alias) {
            return new BookAuthorsPath(alias, this);
        }

        @Override
        public BookAuthorsPath as(Table<?> alias) {
            return new BookAuthorsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BookAuthorsRecord> getPrimaryKey() {
        return Keys.BOOK_AUTHORS_PKEY;
    }

    @Override
    public List<ForeignKey<BookAuthorsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOOK_AUTHORS__BOOK_AUTHORS_AUTHOR_ID_FKEY, Keys.BOOK_AUTHORS__BOOK_AUTHORS_BOOK_ID_FKEY);
    }

    private transient AuthorsPath _authors;

    /**
     * Get the implicit join path to the <code>public.authors</code> table.
     */
    public AuthorsPath authors() {
        if (_authors == null)
            _authors = new AuthorsPath(this, Keys.BOOK_AUTHORS__BOOK_AUTHORS_AUTHOR_ID_FKEY, null);

        return _authors;
    }

    private transient BooksPath _books;

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    public BooksPath books() {
        if (_books == null)
            _books = new BooksPath(this, Keys.BOOK_AUTHORS__BOOK_AUTHORS_BOOK_ID_FKEY, null);

        return _books;
    }

    @Override
    public BookAuthors as(String alias) {
        return new BookAuthors(DSL.name(alias), this);
    }

    @Override
    public BookAuthors as(Name alias) {
        return new BookAuthors(alias, this);
    }

    @Override
    public BookAuthors as(Table<?> alias) {
        return new BookAuthors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookAuthors rename(String name) {
        return new BookAuthors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookAuthors rename(Name name) {
        return new BookAuthors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookAuthors rename(Table<?> name) {
        return new BookAuthors(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookAuthors where(Condition condition) {
        return new BookAuthors(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookAuthors where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookAuthors where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookAuthors where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookAuthors where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookAuthors where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookAuthors where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookAuthors where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookAuthors whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookAuthors whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
