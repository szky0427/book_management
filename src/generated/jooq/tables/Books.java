/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Authors.AuthorsPath;
import jooq.tables.BookAuthors.BookAuthorsPath;
import jooq.tables.records.BooksRecord;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Books extends TableImpl<BooksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.books</code>
     */
    public static final Books BOOKS = new Books();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BooksRecord> getRecordType() {
        return BooksRecord.class;
    }

    /**
     * The column <code>public.books.id</code>.
     */
    public final TableField<BooksRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.books.title</code>.
     */
    public final TableField<BooksRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.books.price</code>.
     */
    public final TableField<BooksRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.books.publish_status</code>.
     */
    public final TableField<BooksRecord, String> PUBLISH_STATUS = createField(DSL.name("publish_status"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    private Books(Name alias, Table<BooksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Books(Name alias, Table<BooksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.books</code> table reference
     */
    public Books(String alias) {
        this(DSL.name(alias), BOOKS);
    }

    /**
     * Create an aliased <code>public.books</code> table reference
     */
    public Books(Name alias) {
        this(alias, BOOKS);
    }

    /**
     * Create a <code>public.books</code> table reference
     */
    public Books() {
        this(DSL.name("books"), null);
    }

    public <O extends Record> Books(Table<O> path, ForeignKey<O, BooksRecord> childPath, InverseForeignKey<O, BooksRecord> parentPath) {
        super(path, childPath, parentPath, BOOKS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BooksPath extends Books implements Path<BooksRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BooksPath(Table<O> path, ForeignKey<O, BooksRecord> childPath, InverseForeignKey<O, BooksRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BooksPath(Name alias, Table<BooksRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BooksPath as(String alias) {
            return new BooksPath(DSL.name(alias), this);
        }

        @Override
        public BooksPath as(Name alias) {
            return new BooksPath(alias, this);
        }

        @Override
        public BooksPath as(Table<?> alias) {
            return new BooksPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BooksRecord, Integer> getIdentity() {
        return (Identity<BooksRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BooksRecord> getPrimaryKey() {
        return Keys.BOOKS_PKEY;
    }

    private transient BookAuthorsPath _bookAuthors;

    /**
     * Get the implicit to-many join path to the
     * <code>public.book_authors</code> table
     */
    public BookAuthorsPath bookAuthors() {
        if (_bookAuthors == null)
            _bookAuthors = new BookAuthorsPath(this, null, Keys.BOOK_AUTHORS__BOOK_AUTHORS_BOOK_ID_FKEY.getInverseKey());

        return _bookAuthors;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.authors</code> table
     */
    public AuthorsPath authors() {
        return bookAuthors().authors();
    }

    @Override
    public List<Check<BooksRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("books_price_check"), "((price >= 0))", true),
            Internal.createCheck(this, DSL.name("books_publish_status_check"), "(((publish_status)::text = ANY ((ARRAY['0'::character varying, '1'::character varying])::text[])))", true)
        );
    }

    @Override
    public Books as(String alias) {
        return new Books(DSL.name(alias), this);
    }

    @Override
    public Books as(Name alias) {
        return new Books(alias, this);
    }

    @Override
    public Books as(Table<?> alias) {
        return new Books(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Books rename(String name) {
        return new Books(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Books rename(Name name) {
        return new Books(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Books rename(Table<?> name) {
        return new Books(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Books where(Condition condition) {
        return new Books(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Books where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Books where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Books where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Books where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Books where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Books where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Books where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Books whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Books whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
